#include <stdio.h>
#include <iostream>
#include "opencv2/core.hpp"
#include "opencv2/features2d.hpp"
#include "opencv2/xfeatures2d.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <fstream>
#include <string>
#include <stdlib.h>
#include <opencv2/ml.hpp>

using namespace cv;
using namespace std;
using namespace cv::xfeatures2d;
using namespace cv::ml;

/* maybe helpful:
https://gilscvblog.com/2013/08/18/a-short-introduction-to-descriptors/ */

/*search 'del' to find stuff to delete (code used for bug testing)*/

/* Questions:
How to limit the number of features? 
-because you find a varying amount of features per picture, the descriptors are not the same length */

/* Function headers */
//void trainCreateFile(int start, int stop);
void trainCreateMem(int start, int stop);
void testCreateMem(int start, int stop);
void machine();


/* where the contours are located */
string dir1 = "images\\";

/* number of contour files created in task2 */
/*train*/
const int numOfContours = 10;
int labels[numOfContours];
int num_features = 8;
int img_area = 64 * num_features;
Mat training_mat(numOfContours, img_area, CV_32FC1);

ofstream myfile;

/** @function main */
int main() {
	myfile.open("train.txt");	//currently used for debugging

	trainCreateMem(0, numOfContours);
	//trainCreateMem(5, numOfContours+5);
	/* Start the machine learning! */
	machine();

	myfile.close();
	return 0;
}

/*test*/		//{ 12, 38, 39, 60, 61, 77, 78, 98, 99, 120, 122, 155, 175, 176, 208, 247, 278, 279 }
int testStart = 12;
int testStop = 40;
int numOfContoursTest = testStop-testStart;
Mat test_mat(numOfContoursTest, img_area, CV_32FC1);


//Mat test = (Mat_<float>(6, 64 * num_features) << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.30520669, 0.13741177, 0.30520669, 0.1889547, -0.30466688, 0.22247094, 0.32710785, 0.22247094, 0, 0, 0, 0, 0, 0, 0, 0, 0.25579798, -0.15122454, 0.25579798, 0.15122454, -0.22573623, -0.21501116, 0.31488582, 0.29556924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.16913709, 0.17283764, 0.18695319, 0.22966258, -0.15062435, 0.17578053, 0.27687928, 0.21573748, 0, 0, 0, 0, 0, 0, 0, 0, 0.39358857, -0.055934589, 0.39358857, 0.083320685, -0.34126082, 0.0023509287, 0.47273684, 0.11649203, 0, 0, 0, 0, 0, 0, 0, 0, 0.0078930464, -0.016823651, 0.028422154, 0.025074935, -0.0060378909, -0.024370708, 0.018772107, 0.029282944, -6.4144522e-05, 1.8202745e-05, 6.4144522e-05, 3.4035009e-05, 0, 0, 0, 0, 0.00052492449, 1.9546431e-05, 0.00052492449, 1.9546431e-05, 0.016071059, 0.037220053, 0.028672956, 0.041390173, -0.00042911392, 0.007030834, 0.0067339335, 0.007030834, 0, 0, 0, 0, 0.0023356723, -0.00048626342, 0.0023356723, 0.00048626342, 0.47143561, 0.017927032, 0.51464468, 0.11376128, -0.089805432, 0.0061310581, 0.13580786, 0.010324189, 0, 0, 0, 0, 0.00089094305, 8.1583785e-05, 0.00089094305, 0.00089094305, 0.35660475, -0.14771147, 0.44946343, 0.32463709, -0.063504696, -0.024227655, 0.081226975, 0.032027267, 0, 0, 0, 0, 0, 0, 0, 0, 0.00019965558, -0.00010653972, 0.00019965558, 0.00010653972, -5.5584901e-06, -8.0401071e-05, 5.5584901e-06, 8.0401071e-05, 0, 0, 0, 0, 0.012413265, 0.0019721445, 0.012413265, 0.0058094705, 0.055007726, 0.018232543, 0.063395754, 0.032060567, -0.0076457728, 0.0026360685, 0.010700298, 0.0033944934, 0, 0, 0, 0, 0.05649028, -0.011793531, 0.05649028, 0.012372001, 0.4663668, -0.05376754, 0.4674187, 0.055438105, -0.059307314, 0.0062987814, 0.0794871, 0.0071359575, 0, 0, 0, 0, 0.097160101, 0.0076056561, 0.097160101, 0.031265017, 0.2542772, -0.12099813, 0.4942219, 0.42411128, -0.026793117, -0.044663105, 0.041235141, 0.068973944, 0, 0, 0, 0, 0.00013874262, -0.00013874262, 0.00013874262, 0.00013874262, 0.00041050749, -0.0012313259, 0.0011274548, 0.0014551163, -0.00011695514, -0.00024024752, 0.0001356112, 0.00029868149, 0, 0, 0, 0, 0, 0, 0, 0, 0.0046255044, 0.014834405, 0.0064965477, 0.014834405, 0.0038705948, 0.011161099, 0.0039724796, 0.012382325, 0, 0, 0, 0, 0.16812101, -0.026739335, 0.16812101, 0.15088175, 0.14256741, 0.11059651, 0.26352084, 0.6338613, 0.02068972, 0.0412318, 0.028528484, 0.071624845, 0, 0, 0, 0, 0.0047723763, 2.1264068e-05, 0.0062770084, 0.007086304, 0.41005358, -0.1319799, 0.42033637, 0.18930551, -0.006474372, -0.039456207, 0.016509574, 0.044996716, 0, 0, 0, 0, 0.00041981414, 0.00021914551, 0.00069586333, 0.0006019763, 0.020026959, -0.0063642729, 0.052907515, 0.044261131, -0.0010904685, -0.0036413856, 0.0025524332, 0.0036413856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25435904, 0.07766699, 0.49592692, 0.32888061, -0.0053893388, 0.092051975, 0.020213254, 0.092051975, 0, 0, 0, 0, 0.0037327497, 0.0020249474, 0.0056850859, 0.0036759265, 0.43858087, 0.048815079, 0.57433224, 0.15118252, 0.0034320264, -0.033194575, 0.0053262725, 0.062260825, 0, 0, 0, 0, 0.00041591251, 8.9666886e-05, 0.00088265986, 0.00026852067, 0.026757415, -0.025148321, 0.038711078, 0.044218436, 0.0028255675, 0.001023122, 0.0034304722, 0.020554375, 0, 0, 0, 0, 0.01727668, 0.0004782847, 0.036293615, 0.018680079, 0.0041737203, 0.045173917, 0.019570438, 0.10862026, 0.00095074542, -6.5197462e-05, 0.0068412535, 0.0063687991, 0, 0, 0, 0, 0.059523121, 0.0072058523, 0.47964603, 0.035976514, 0.28695068, 0.038637727, 0.45827705, 0.043410588, -0.056277629, -0.0019830081, 0.059745166, 0.0077691069, 0, 0, 0, 0, 0.051924605, 0.0070270663, 0.39484009, 0.084156863, 0.22194169, -0.16017166, 0.40248922, 0.19483776, -0.037057586, 0.0037718532, 0.04524751, 0.01634825, 0, 0, 0, 0, 3.5615525e-05, -0.018538253, 0.0088270996, 0.018538253, 0.0054107453, -0.021767935, 0.0056856419, 0.021953706, -0.0010781861, -0.0079589523, 0.0029871305, 0.0079845311, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08,
//0, 0, 0, 0, 0.018529249, 0.0043903296, 0.041123476, 0.030535191, -0.0014633697, 0.065276012, 0.036407489, 0.065276012, -0.0013546621, 0.00026045079, 0.0013546621, 0.00031712934, 0, 0, 0, 0, 0.30129784, 0.090098143, 0.38156679, 0.10118216, -0.11476886, 0.036583159, 0.32091907, 0.45429558, -0.010711612, -0.00067066523, 0.010711612, 0.00080018607, 0, 0, 0, 0, 0.18195404, -0.15805583, 0.27258438, 0.15844569, -0.10333114, -0.3375127, 0.10734079, 0.33857962, -0.0058417576, -0.00084143231, 0.0058417576, 0.0011644741, 0, 0, 0, 0, 0.00011235445, -0.00011235445, 0.00011235445, 0.00011235445, -0.00011235445, -0.00011235445, 0.00011235445, 0.00011235445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.28616893, 0.11000318, 0.28616893, 0.29032004, -0.29505879, 0.11697759, 0.29505879, 0.190525, 0, 0, 0, 0, 0, 0, 0, 0, 0.29775959, -0.11482818, 0.29775959, 0.20232423, -0.28722695, -0.10784288, 0.28722695, 0.32810739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009394424, 0.014274959, 0.0098302979, 0.014454881, -0.0012289577, 0.0487983, 0.013529829, 0.048826583, -1.3218484e-05, -4.6480964e-06, 1.3218484e-05, 1.3218484e-05, 0, 0, 0, 0, 0.28457236, 0.10739638, 0.29640648, 0.13473268, -0.10610203, 0.084252037, 0.34040231, 0.4613263, 0, 0, 0, 0, 0, 0, 0, 0, 0.17992741, -0.15602078, 0.27715111, 0.15796179, -0.10134728, -0.32825917, 0.17562692, 0.37619752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.23846616, 0.14861563, 0.24192001, 0.27207658, -0.16461654, 0.29606369, 0.22357981, 0.30163229, -0.016919764, 0.013771579, 0.016991414, 0.014465126, 0, 0, 0, 0, 0.23380549, -0.12937096, 0.296197, 0.23478681, -0.0064987293, -0.19678788, 0.3883419, 0.35090631, -0.048142567, -0.0072721564, 0.048168663, 0.011732332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.2892034e-06, -1.2197848e-05, 1.2197848e-05, 1.2197848e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0.00020132266, 0.00043401073, 0.00045508341, 0.00043401073, -4.8655679e-06, 6.8871857e-05, 0.00010947484, 6.8871857e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0.40972608, 0.12867686, 0.43752077, 0.34717903, -0.051992077, 0.044220183, 0.067912623, 0.054680794, 0, 0, 0, 0, 0, 0, 0, 0, 0.34766489, -0.14027475, 0.46009818, 0.35817742, -0.0092046354, -0.04128971, 0.07011202, 0.064134859, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.7224314e-06, -6.7224314e-06, 6.7224314e-06, 6.7224314e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00071010535, -9.7196717e-05, 0.00071010535, 0.00071010535, 0.3263357, 0.11591882, 0.43128261, 0.33542323, -0.008899292, 0.054797288, 0.038685709, 0.057024971, 0, 0, 0, 0, 0, 0, 0, 0, 0.39097005, 0.074468173, 0.55422747, 0.29588005, -0.027236873, -0.026352482, 0.036400571, 0.081971943, 0, 0, 0, 0, 0, 0, 0, 0, 0.046571121, -0.045126941, 0.068138741, 0.045182362, -0.0029902353, -0.010340113, 0.003503938, 0.010381304, 0, 0, 0, 0, 0.00027305551, 0.00032759388, 0.00051361241, 0.00032759388, 0.0057074931, 0.019886166, 0.0058651497, 0.019922443, 0.001234, 0.0093136569, 0.0041658264, 0.0093468567, 0, 0, 0, 0, 0.012957931, -0.003368879, 0.01401589, 0.0095379325, 0.37126562, -0.036868405, 0.46599966, 0.2870377, -0.001244969, -0.03287458, 0.043957744, 0.086959168, 0, 0, 0, 0, 0.0020804943, 0.00057203259, 0.0020804943, 0.0020804943, 0.43069106, 0.098344147, 0.49444094, 0.30414143, -0.027916184, 0.033855248, 0.040007159, 0.082880676, 0, 0, 0, 0, 0.00038623964, -8.6409971e-05, 0.00038623964, 8.6409971e-05, 0.027762672, -0.021032276, 0.061998501, 0.038045105, -0.0019013697, -0.0068687582, 0.0029698699, 0.0068687582, 0, 0, 0, 0, 5.7981397e-05, 0.00046823177, 0.00053952367, 0.00046823177, 0.0043190992, 0.029486978, 0.010016215, 0.029486978, -0.00056848937, 0.0013296945, 0.00056848937, 0.0013296945, 0, 0, 0, 0, 0.007879707, 0.00067249197, 0.011609926, 0.0056307367, 0.48687151, 0.073449187, 0.5542084, 0.24893378, -0.033354886, 0.019291826, 0.038342964, 0.071575977, 0, 0, 0, 0, 0.062596783, 0.011932966, 0.065193564, 0.013748959, 0.37738207, -0.047959879, 0.41171435, 0.20101497, -0.033597108, -0.025569091, 0.063974299, 0.031824283, 0, 0, 0, 0, 0.0049422737, -0.004678431, 0.0060924054, 0.0055440562, 0.0090824598, -0.062791184, 0.009316775, 0.062876105, 0.0027030464, -0.0036852246, 0.0027089512, 0.0068972977,
//0, 0, 0, 0, 0.03046168, 0.0060327714, 0.03046168, 0.0073054908, -0.014718643, 0.028694198, 0.020337703, 0.052163448, -0.0031414009, 0.0032252704, 0.0031414009, 0.0032252704, 0.00010355081, 0.00010355081, 0.00010355081, 0.00010355081, 0.22607005, 0.16950485, 0.35522193, 0.18786128, -0.059795797, 0.042050369, 0.33992916, 0.38939652, -0.015455741, -0.0069680787, 0.015455741, 0.0075143729, 0.00010355081, -0.00010355081, 0.00010355081, 0.00010355081, 0.19623081, -0.19205767, 0.27028054, 0.28431141, -0.17049685, -0.21644062, 0.2691671, 0.31901875, 0, 0, 0, 0, 0, 0, 0, 0, -3.4779492e-05, -0.00031138436, 0.00015415158, 0.00031138436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.24567372, 0.13792215, 0.24680336, 0.13792215, -0.23565963, 0.17368492, 0.27231431, 0.19689076, 0, 0, 0, 0, 0, 0, 0, 0, 0.32532257, -0.11899205, 0.33408764, 0.34011453, -0.33603239, -0.17808621, 0.33603239, 0.19294551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.018482791, 0.0038228885, 0.038104638, 0.039823517, -0.0060290899, 0.043094773, 0.025888871, 0.046348374, -4.2286825e-05, 4.2286825e-05, 4.2286825e-05, 4.2286825e-05, 0, 0, 0, 0, 0.30150637, 0.073907189, 0.37131491, 0.11511621, -0.14242619, 0.034382008, 0.34782782, 0.40566328, -0.00040957271, -0.0002908624, 0.00040957271, 0.0002908624, 0, 0, 0, 0, 0.24478236, -0.13545333, 0.24575971, 0.13717438, -0.13743612, -0.26611468, 0.30778933, 0.3089672, -0.0011080133, 9.165176e-05, 0.0011080133, 0.00069605315, 0, 0, 0, 0, 0, 0, 0, 0, 2.0003463e-05, -0.00011014069, 0.00011014069, 0.00011014069, 0, 0, 0, 0, 0, 0, 0, 0, 0.031626333, 0.001281389, 0.031626333, 0.018776257, -0.015604048, 0.047212813, 0.024526693, 0.06180688, -1.926878e-05, 8.6128566e-05, 1.926878e-05, 8.6128566e-05, 0, 0, 0, 0, 0.34887525, 0.012259268, 0.3544603, 0.22668198, -0.20042498, -0.077829711, 0.45050129, 0.42335612, -0.00081179285, -0.00021594345, 0.00081179285, 0.00021594345, 0, 0, 0, 0, 0.11252624, -0.087073207, 0.14864404, 0.23488234, -0.067252964, -0.23336309, 0.19943038, 0.25920433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00025483788, 5.3307504e-05, 0.00025483788, 5.3307504e-05, 0.0001383558, 0.00067554304, 0.00037794848, 0.00067554304, 0, 0, 0, 0, 0.026403494, -0.0026591476, 0.026403494, 0.016762357, 0.30429944, 0.16224024, 0.44891581, 0.37889329, -0.026753072, 0.043746885, 0.049827952, 0.055408537, 0, 0, 0, 0, 0.0030222416, -9.2724491e-05, 0.0030222416, 0.00067743188, 0.38239715, 0.022534678, 0.46739528, 0.36718678, -0.043379042, -0.02885475, 0.05557641, 0.062586017, 0, 0, 0, 0, 0.00042186183, -3.4966135e-05, 0.00042186183, 0.0001125151, 0.038694475, -0.05358509, 0.044264067, 0.099371575, -0.0037205676, -0.0043473169, 0.007033702, 0.0091938311, 0, 0, 0, 0, 0, 0, 0, 0, 0.005151093, 0.020343143, 0.0068438458, 0.020343143, 0.00011985814, 0.0071121594, 0.0020964174, 0.0071121594, 0, 0, 0, 0, 0, 0, 0, 0, 0.34323177, 0.018813284, 0.55331022, 0.20362125, -0.028719421, -0.0087953499, 0.057953022, 0.069617622, 0, 0, 0, 0, 0.0018486719, 0.00020648392, 0.0018486719, 0.00091518956, 0.42340508, -0.013615237, 0.4560529, 0.34745288, -0.069678292, -0.0048414175, 0.077358745, 0.066219494, 0, 0, 0, 0, 0, 0, 0, 0, 0.0035884178, -0.01732068, 0.008485212, 0.01732068, -0.00061175181, -0.0014059487, 0.00061175181, 0.0014059487, 0, 0, 0, 0, 0, 0, 0, 0, 0.00023551931, 0.00018810864, 0.00023551931, 0.00018810864, -3.479085e-05, 0.00010267685, 8.9981666e-05, 0.00010267685, 0, 0, 0, 0, 0.0019761266, -0.0013288239, 0.0028471027, 0.0044971542, 0.30224848, 0.16294508, 0.48386118, 0.33784372, -0.027019495, 0.041647531, 0.036532901, 0.060134199, 0, 0, 0, 0, 0, 0, 0, 0, 0.32115862, -0.13413423, 0.55231893, 0.30471012, -0.012045737, -0.03295603, 0.050955191, 0.059197064, 0, 0, 0, 0, 0, 0, 0, 0, 0.00050268922, -0.00064149383, 0.00064149383, 0.00064149383, 0.00053376722, -0.0023156884, 0.001178651, 0.0023156884, 0, 0, 0, 0, 0, 0, 0, 0, 9.513626e-05, 0.00073851016, 0.00024318711, 0.00073851016, 1.2783227e-05, 4.1134259e-05, 4.1134259e-05, 4.1134259e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0.37514672, 0.10674386, 0.42374641, 0.2718046, -0.078108773, 0.01341009, 0.081446521, 0.059517153, 0, 0, 0, 0, 0, 0, 0, 0, 0.38430244, -0.10162141, 0.48842949, 0.40885651, -0.073462881, -0.019871751, 0.079020709, 0.04685536, 0, 0, 0, 0, 0, 0, 0, 0, 6.675483e-05, -0.00042856816, 0.0002148057, 0.00042856816, 0, 0, 0, 0,
//0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.067974463, 0.07609044, 0.17415175, 0.16116332, -0.070726424, 0.089950778, 0.093944632, 0.09956415, 0, 0, 0, 0, 0, 0, 0, 0, 0.4772678, -0.0067731976, 0.4772678, 0.080512971, -0.43727723, 0.12677725, 0.44409987, 0.15069743, 0, 0, 0, 0, 0, 0, 0, 0, 0.029982984, -0.009862449, 0.029982984, 0.009862449, -0.017545639, -0.020991523, 0.088312566, 0.039994311, 0, 0, 0, 0, 0, 0, 0, 0, 0.00013953203, 0.00013953203, 0.00013953203, 0.00013953203, -2.6255624e-05, 0.0015089735, 0.00072075013, 0.0015089735, 0, 0, 0, 0, 0, 0, 0, 0, 0.079963416, -0.00053904351, 0.079963416, 0.016175216, 0.19167227, 0.1490407, 0.61469853, 0.2209942, -0.0093735782, 0.0015275782, 0.0093735782, 0.0016884289, 0, 0, 0, 0, 0.092678867, 0.012233892, 0.092678867, 0.019188024, 0.22902118, -0.01270645, 0.64587432, 0.072362676, -0.024871336, 0.00061708927, 0.024871336, 0.0058708298, 0, 0, 0, 0, 0.020731004, -0.001513761, 0.020731004, 0.0015507728, 0.011208337, -0.018527312, 0.071555227, 0.026300373, -0.0013571079, 6.4511155e-06, 0.0013571079, 0.00022698491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0022605616, 0.00038818759, 0.0022605616, 0.0011962325, 0.1897735, 0.11840125, 0.64826047, 0.19034994, -0.00088372309, 0.00037036353, 0.00088372309, 0.00037036353, 0, 0, 0, 0, 0.0024392989, -0.00040402246, 0.0024392989, 0.00040402246, 0.20368402, -0.046486925, 0.65734154, 0.11955977, -0.0021606595, -6.9786496e-05, 0.0021606595, 0.00074131024, 0, 0, 0, 0, 0.00021159665, 5.6859953e-05, 0.00021159665, 0.00021159665, 0.01305359, -0.021226335, 0.036841542, 0.037914023, -0.00030960867, 2.2466138e-06, 0.00030960867, 0.00017220885, 0, 0, 0, 0, 0.00033958338, -0.00017410482, 0.00033958338, 0.00042611887, 0.013748787, 0.062518358, 0.034029391, 0.062637322, -0.0021529791, 0.0041171052, 0.0021529791, 0.0041733393, 0, 0, 0, 0, 0.003350273, 0.00032623223, 0.003350273, 0.00032623223, 0.25848183, 0.0087285219, 0.56518835, 0.20515877, -0.015155444, 0.005786255, 0.057219572, 0.0068700952, 0, 0, 0, 0, 0.0016483068, -0.00051633007, 0.0016483068, 0.00051633007, 0.37126476, 0.0032962307, 0.6303317, 0.097731039, -0.058426589, 0.0019009567, 0.058426589, 0.013494623, 0, 0, 0, 0, 0, 0, 0, 0, 0.050277308, -0.017918266, 0.058646634, 0.019514007, -0.012622872, -0.00024778652, 0.012790394, 0.0048823822, 0, 0, 0, 0, 0.0072804466, 0.0055085379, 0.0072804466, 0.0055085379, -0.00035418465, 0.064620405, 0.014418653, 0.064620405, -0.00012769431, 0.00012769431, 0.00012769431, 0.00012769431, 0, 0, 0, 0, 0.093614444, -0.0052855019, 0.093614444, 0.00689608, 0.17516179, 0.017716723, 0.64021116, 0.064394154, -0.0063881176, 0.00060220779, 0.0063881176, 0.00071297772, 0, 0, 0, 0, 0.18467858, 0.024527734, 0.18467858, 0.029556178, 0.063852988, -0.031574525, 0.66272622, 0.085989527, -0.0047611985, -0.00088313501, 0.0047611985, 0.00099390501, 0, 0, 0, 0, 0.034335747, -0.0023230014, 0.034335747, 0.0023391056, -0.015398377, -0.022416096, 0.047773845, 0.04214409, -0.00013917472, -8.8438674e-06, 0.00013917472, 2.1650432e-05, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08,
//0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.21086156, 0.1193218, 0.21086156, 0.12461626, -0.2012486, 0.17031232, 0.29068154, 0.171388, 0, 0, 0, 0, 0, 0, 0, 0, 0.38426715, -0.04195521, 0.38483277, 0.044190243, -0.36607927, -0.063392274, 0.50384462, 0.069033526, 0, 0, 0, 0, 0, 0, 0, 0, 0.0056676199, -0.016268782, 0.0056676199, 0.016268782, -0.0052992855, -0.02293315, 0.011374628, 0.02293315, 0, 0, 0, 0, 0, 0, 0, 0, 0.0066131009, 0.011581831, 0.0066131009, 0.011581831, -0.0064571905, 0.014415981, 0.0064571905, 0.014415981, 0, 0, 0, 0, 0, 0, 0, 0, 0.44360089, 0.071681261, 0.44360089, 0.07245557, -0.44499207, 0.03436422, 0.44499207, 0.056524612, 0, 0, 0, 0, 0, 0, 0, 0, 0.16865495, -0.14887875, 0.16865495, 0.15725158, -0.17299411, -0.12366412, 0.17299411, 0.12590951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06590867, 0.070997067, 0.12462628, 0.11591199, -0.064403437, 0.096444614, 0.12728249, 0.096444614, 0, 0, 0, 0, 0, 0, 0, 0, 0.4822703, -0.0054977611, 0.4822703, 0.11711048, -0.43534088, 0.12864564, 0.45566228, 0.13841181, 0, 0, 0, 0, 0, 0, 0, 0, 0.020637801, -0.0080298856, 0.020637801, 0.0082845185, -0.0088109495, -0.031477697, 0.084905893, 0.040770978, 0, 0, 0, 0, 0, 0, 0, 0, 0.00055803248, 0.00055803248, 0.00055803248, 0.00055803248, -0.00055803248, 0.00055803248, 0.00055803248, 0.00055803248, 0, 0, 0, 0, 0, 0, 0, 0, 0.33306774, 0.093245327, 0.33306774, 0.094020881, -0.28590769, 0.011627784, 0.67754042, 0.23578073, 0, 0, 0, 0, 0, 0, 0, 0, 0.15396416, -0.11788917, 0.15396416, 0.1189107, -0.15641578, -0.14086033, 0.15641578, 0.14086033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08,
//0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.28873548, 0.20768125, 0.28873548, 0.20768125, -0.27941796, 0.11762103, 0.27941796, 0.3307341, 0, 0, 0, 0, 0, 0, 0, 0, 0.28195322, -0.19848955, 0.28195322, 0.22098047, -0.29624429, -0.12852451, 0.29624429, 0.16842379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.6487358e-05, 5.7430618e-05, 5.7430618e-05, 5.7430618e-05, 0, 0, 0, 0, 0.23350497, 0.13470207, 0.24095117, 0.13781919, -0.064181238, 0.27897802, 0.11911617, 0.42131552, -0.036782727, 0.017139981, 0.037030451, 0.028975783, 0, 0, 0, 0, 0.35941398, -0.068660252, 0.39539462, 0.073853537, 0.013173901, 0.0086278971, 0.3839339, 0.31671053, -0.099520512, 0.0089683654, 0.099702582, 0.0092866784, 0, 0, 0, 0, 0.029132405, 0.004996011, 0.034979682, 0.013723864, 0.0147151, -0.041478883, 0.042790808, 0.054103158, -0.0067751752, -0.0039546741, 0.006929907, 0.0057867761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.22488587, 0.15013768, 0.24742165, 0.1776669, -0.14652398, 0.23894142, 0.25817773, 0.259408, 0, 0, 0, 0, 0, 0, 0, 0, 0.34394681, -0.096240558, 0.35006544, 0.11535546, -0.20481737, -0.088169359, 0.46419004, 0.2980614, 0, 0, 0, 0, 0, 0, 0, 0, 0.0080563948, -0.016111752, 0.0081850039, 0.016111752, -0.0055697081, -0.041394584, 0.0055697081, 0.041394584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.043499, 0.047135409, 0.056858122, 0.047135409, -0.004456718, 0.0052140718, 0.0049298448, 0.0079562226, 0, 0, 0, 0, 0, 0, 0, 0, 0.37237096, -0.054713573, 0.59114593, 0.26731181, -0.0011654117, 0.023582475, 0.052236978, 0.040284652, 0, 0, 0, 0, 0, 0, 0, 0, 0.33152404, -0.11487642, 0.42979398, 0.32786882, -0.023158079, -0.050693918, 0.03298334, 0.057492089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.32015279, 0.11013531, 0.53733933, 0.31675872, -0.01407265, 0.052005369, 0.039764624, 0.075754113, 0, 0, 0, 0, 0.00069841696, 9.5596857e-05, 0.00069841696, 0.00069841696, 0.38760197, -0.10143802, 0.49308288, 0.28001219, -0.0085896309, -0.026837524, 0.020967619, 0.05273347, 0, 0, 0, 0, 0, 0, 0, 0, 0.00023664659, -0.00054579525, 0.00091564481, 0.00054579525, 0.000148632, -0.00021555051, 0.00015351188, 0.00021555051, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08, -4.3160208e+08);

/* start has to be 0*/
void trainCreateMem(int start, int stop) {
	/* images that are numberplates */
	int posPlate[] = { 12, 38, 39, 60, 61, 77, 78, 98, 99, 120, 122, 155, 175, 176, 208, 247, 278, 279 };
	int k = -1;
	for (int i = start; i < stop; ++i) {
		k++;
		string path = dir1 + std::to_string(i) + ".jpg";
		Mat img_1 = imread(path, IMREAD_GRAYSCALE);
		if (!img_1.data) {
			cout << " --(!) Error reading image " << path << endl;
		}
		int minHessian = 500;

		Ptr<SURF> detector = SURF::create(minHessian);
		//Ptr<FeatureDetector> detector(new DynamicAdaptedFeatureDetector (100, 110, 10, new FastAdjuster(20,true)));

		vector<KeyPoint> keypoints_1;

		Mat descriptor_1;
		detector->detect(img_1, keypoints_1);
		KeyPointsFilter::retainBest(keypoints_1, num_features);
		//del
		int si = keypoints_1.size();
		/*while (si < num_features) {
			keypoints_1.push_back();
		}*/
		//myfile << i << ".jpg:  \t amount of keypoints = " << si << "\n";

		detector->compute(img_1, keypoints_1, descriptor_1);
		//myfile << descriptor_1 << "\n";
		//myfile << "row = " << descriptor_1.rows << ", col = " << descriptor_1.cols << "\n";
		//http://stackoverflow.com/questions/14694810/using-opencv-and-svm-with-images
		int ii = 0; // Current column in training_mat
		for (int u = 0; u<descriptor_1.rows; u++) {
			for (int j = 0; j < descriptor_1.cols; j++) {
				//cout << "u = " << u << ", j = " << j << ", i = " << i << ", ii = " << ii /*<< ", descriptor_1.rows = " << descriptor_1.rows << ", descriptor_1.cols = " << descriptor_1.cols */<< endl;
				training_mat.at<float>(k, ii++) = descriptor_1.at<float>(u, j);
			}
		}

		// check if i is in posPlate (if image is numberplate)	http://stackoverflow.com/questions/19299508/how-can-i-check-if-given-int-exists-in-array
		if (find(begin(posPlate), end(posPlate), i) != end(posPlate)) {
			labels[i] = 1;
		}
		else {
			labels[i] = 0;
		}
	}
}

void testCreateMem(int start, int stop) {
	int k = -1;
	for (int i = start; i < stop; ++i) {
		k++;
		string path = dir1 + std::to_string(i) + ".jpg";
		Mat img_1 = imread(path, IMREAD_GRAYSCALE);
		if (!img_1.data) {
			cout << " --(!) Error reading image " << path << endl;
		}
		int minHessian = 500;

		Ptr<SURF> detector = SURF::create(minHessian);
		//Ptr<FeatureDetector> detector(new DynamicAdaptedFeatureDetector (100, 110, 10, new FastAdjuster(20,true)));

		vector<KeyPoint> keypoints_1;

		Mat descriptor_1;
		detector->detect(img_1, keypoints_1);
		KeyPointsFilter::retainBest(keypoints_1, num_features);
		//del
		int si = keypoints_1.size();
		//myfile << i << ".jpg:  \t amount of keypoints = " << si << "\n";

		detector->compute(img_1, keypoints_1, descriptor_1);
		//myfile << descriptor_1 << "\n";
		//myfile << "row = " << descriptor_1.rows << ", col = " << descriptor_1.cols << "\n";
		//http://stackoverflow.com/questions/14694810/using-opencv-and-svm-with-images
		int ii = 0; // Current column in training_mat
		for (int u = 0; u<descriptor_1.rows; u++) {
			for (int j = 0; j < descriptor_1.cols; j++) {
				//cout << "u = " << u << ", j = " << j << ", i = " << i << ", ii = " << ii /*<< ", descriptor_1.rows = " << descriptor_1.rows << ", descriptor_1.cols = " << descriptor_1.cols */<< endl;
				test_mat.at<float>(k, ii++) = descriptor_1.at<float>(u, j);
			}
		}
	}
}

Mat predictResults;

void machine() {	//http://docs.opencv.org/3.0-rc1/d1/d73/tutorial_introduction_to_svm.html

	Mat labelsMat(numOfContours, 1, CV_32SC1, labels);
	Ptr<SVM> svm = SVM::create();
	svm->setType(SVM::C_SVC);
	svm->setKernel(SVM::LINEAR);
	svm->setTermCriteria(TermCriteria(TermCriteria::MAX_ITER, 100, 1e-6));
	svm->train(training_mat, ROW_SAMPLE, labelsMat);

	//del
	//why does this give false?
	//myfile << "train?: " << svm->isTrained() << "\n";
	//myfile << training_mat << "\n";
	//myfile << "row: " << training_mat.rows << "\n";
	//myfile << "col: " << training_mat.cols << " => 64*numOfFeaturePoints\n";

	//svm->save("mySVM.xml");

	/*try to predict*/
	testCreateMem(testStart, testStop);
	Mat results;
	svm->predict(test_mat, results);
	myfile << results << "\n";
}